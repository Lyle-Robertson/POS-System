/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package rmpspos_productdata;

import java.awt.Dimension;
import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.print.PrinterException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author lance
 */

public class RMPSPOS_Home extends javax.swing.JFrame {
    
    static Dimension scrnSize = Toolkit.getDefaultToolkit().getScreenSize();
    static Rectangle winSize = GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds();
    static int taskBarHeight = scrnSize.height - winSize.height;
    public static List<String> prodDescs= new ArrayList<>();
    public static List<Object> unsortedProds = new ArrayList<>();
    public static List<Object> products = new ArrayList<>();
    public static List<Object> productList = new ArrayList<>();
    public static List<Object> productData = new ArrayList<>();
   

    JpanelLoader jpload = new JpanelLoader();

    /**
     * Creates new form RMPSPOS_Home
     */
    public RMPSPOS_Home() {
        
        initComponents();
        
        this.setSize(scrnSize.width, scrnSize.height - taskBarHeight );
        this.setBounds(0, 0, scrnSize.width, scrnSize.height);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LHNavigation = new javax.swing.JPanel();
        Init_CardSale = new javax.swing.JButton();
        Init_CashSale = new javax.swing.JButton();
        Init_Edit = new javax.swing.JButton();
        Init_Add = new javax.swing.JButton();
        Quantities = new javax.swing.JButton();
        MainDisplay = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("HomeFrame"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(scrnSize.width, scrnSize.height - taskBarHeight));

        LHNavigation.setBackground(new java.awt.Color(102, 0, 0));
        LHNavigation.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        LHNavigation.setForeground(new java.awt.Color(255, 255, 255));
        LHNavigation.setPreferredSize(new java.awt.Dimension(150, scrnSize.height - taskBarHeight));
        LHNavigation.setRequestFocusEnabled(false);

        Init_CardSale.setText("Card Sale");
        Init_CardSale.setMaximumSize(new java.awt.Dimension(80, 25));
        Init_CardSale.setMinimumSize(new java.awt.Dimension(80, 25));
        Init_CardSale.setPreferredSize(new java.awt.Dimension(80, 25));
        Init_CardSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Init_CardSaleActionPerformed(evt);
            }
        });

        Init_CashSale.setText("Cash Sale");
        Init_CashSale.setPreferredSize(new java.awt.Dimension(80, 25));
        Init_CashSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Init_CashSaleActionPerformed(evt);
            }
        });

        Init_Edit.setText("Edit");
        Init_Edit.setPreferredSize(new java.awt.Dimension(80, 25));
        Init_Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Init_EditActionPerformed(evt);
            }
        });

        Init_Add.setText("Add");
        Init_Add.setPreferredSize(new java.awt.Dimension(80, 25));
        Init_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Init_AddActionPerformed(evt);
            }
        });

        Quantities.setText("Quantities");
        Quantities.setPreferredSize(new java.awt.Dimension(80, 25));
        Quantities.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuantitiesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LHNavigationLayout = new javax.swing.GroupLayout(LHNavigation);
        LHNavigation.setLayout(LHNavigationLayout);
        LHNavigationLayout.setHorizontalGroup(
            LHNavigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LHNavigationLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(LHNavigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Init_CashSale, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                    .addComponent(Init_Edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Init_Add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Init_CardSale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Quantities, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        LHNavigationLayout.setVerticalGroup(
            LHNavigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LHNavigationLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(Init_CardSale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(Init_CashSale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(Init_Edit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(Init_Add, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(Quantities, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(110, Short.MAX_VALUE))
        );

        MainDisplay.setBackground(new java.awt.Color(51, 51, 51));
        MainDisplay.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        MainDisplay.setPreferredSize((new java.awt.Dimension(scrnSize.width -150, scrnSize.height - taskBarHeight)));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/RMPSPOS_Images/Logo_Resized.jpg"))); // NOI18N

        javax.swing.GroupLayout MainDisplayLayout = new javax.swing.GroupLayout(MainDisplay);
        MainDisplay.setLayout(MainDisplayLayout);
        MainDisplayLayout.setHorizontalGroup(
            MainDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 781, Short.MAX_VALUE)
            .addGroup(MainDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(MainDisplayLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        MainDisplayLayout.setVerticalGroup(
            MainDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(MainDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(MainDisplayLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(LHNavigation, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MainDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LHNavigation, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
            .addComponent(MainDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Init_CardSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Init_CardSaleActionPerformed
        // TODO add your handling code here:
        Card card;
        try {
            card = new Card();
            jpload.jPanelLoader(MainDisplay, card);
        } catch (PrinterException ex) {
            Logger.getLogger(RMPSPOS_Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Init_CardSaleActionPerformed

    private void Init_EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Init_EditActionPerformed
        // TODO add your handling code here:
        Edit edit = new Edit();
        jpload.jPanelLoader(MainDisplay, edit);
    }//GEN-LAST:event_Init_EditActionPerformed

    private void Init_CashSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Init_CashSaleActionPerformed
        // TODO add your handling code here:
        Cash cash = new Cash();
        jpload.jPanelLoader(MainDisplay, cash);
    }//GEN-LAST:event_Init_CashSaleActionPerformed

    private void Init_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Init_AddActionPerformed
        // TODO add your handling code here:
        Add add = new Add();
        jpload.jPanelLoader(MainDisplay, add);
    }//GEN-LAST:event_Init_AddActionPerformed

    private void QuantitiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuantitiesActionPerformed
        // TODO add your handling code here:
        Quantity quantities = new Quantity();
        jpload.jPanelLoader(MainDisplay, quantities);
    }//GEN-LAST:event_QuantitiesActionPerformed
    
    public static void SavingChangesToFile() throws IOException{
        
        // creating blank workbook
        XSSFWorkbook workbook = new XSSFWorkbook();
        //create blank sheet
        
        Set<Object> set = new LinkedHashSet<>();
        set.addAll(products);
        
        products.clear();
        
        products.addAll(set);
       
        XSSFSheet sheet= workbook.createSheet("Products");    
       
        Map<String, Object[]> data = new TreeMap<>();

        data.put("1", new Object[]{ "Product Description", "Cost Price",
            "Selling Price", "Shop Inventory", "Shop Stock", "Supplier Name"});

        for(int i = 2; i < (products.size() + 2); i ++){
               data.put(String.valueOf(i), new Object []{
                   String.valueOf(((RMPSPOS_ProductData) products.get(i - 2)).getProdDescription()),
                   String.valueOf(((RMPSPOS_ProductData) products.get(i - 2)).getCostPrice()),
                   String.valueOf(((RMPSPOS_ProductData) products.get(i - 2)).getPrice()),
                   String.valueOf(((RMPSPOS_ProductData) products.get(i - 2)).getInventoryQty()),
                   String.valueOf(((RMPSPOS_ProductData) products.get(i - 2)).getStockQty()),
                   String.valueOf(((RMPSPOS_ProductData) products.get(i-2)).getSupplier())
               });
                   
        }

        // Iteration over data and writing it to sheet
        Set<String> keyset = data.keySet();

        int rowNum = 0;

        for (String key : keyset){
            // Creating a new row in the sheet
            Row row = sheet.createRow(rowNum++);

            Object[] objArr = data.get(key);

            int cellnum = 0;

            for (Object obj : objArr) {

                // This line creates a cell in the next
                //  column of that row
                Cell cell = row.createCell(cellnum++);

                if (obj instanceof String string){
                    cell.setCellValue(string);

                }

                else if (obj instanceof Integer integer){
                    cell.setCellValue(integer);
                }
            }
        }
        String currentDirectory = System.getProperty("user.dir");
        String inventoryFile = "\\RavensmeadPlumbingSolutionsCatalogue.xlsx";
        
        DateTimeFormatter dateTime = DateTimeFormatter.ofPattern("dd-MM-yyy HH-mm-ss");
        LocalDateTime now = LocalDateTime.now();
        String date = dateTime.format(now);
            
        String backupFile = "\\Backup\\backup" + date + ".xlsx";
         try (  
                // Writing the workbook
                FileOutputStream out = new FileOutputStream(
                        new File(currentDirectory + inventoryFile))) {
            workbook.write(out);
            
            // Closing file output connections
            out.close();
             JFrame frame = new JFrame();
             JOptionPane.showMessageDialog(frame, "CHANGES SAVED"); 


        } catch (Exception e) {
            // Display exceptions along with line number
            // using printStackTrace() method
        }
         
         try(
                 FileOutputStream backUp = new FileOutputStream(
                    new File(currentDirectory + backupFile))){
             workbook.write(backUp);
            
            // Closing file output connections
            backUp.close();
         }
            
    }
    
    public static void CreatedProductList() {
        
        try  {
            List<Object> newSheetProducts = new ArrayList<>(); 
            String currentDirectory = System.getProperty("user.dir");
            String inventoryFile = "\\RavensmeadPlumbingSolutionsCatalogue.xlsx";

            File file = new File(currentDirectory + inventoryFile);
        
            FileInputStream productListFile = new FileInputStream(file);
            XSSFWorkbook workbook = new XSSFWorkbook(productListFile);
            XSSFSheet sheet = workbook.getSheetAt(0);
            
            Iterator rows = sheet.rowIterator();
            
            while (rows.hasNext()) {
                XSSFRow row = (XSSFRow) rows.next();
                Iterator cells = row.cellIterator();
                
                while (cells.hasNext()) {
                    
                    XSSFCell cell = (XSSFCell) cells.next();
                    newSheetProducts.add(cell);
                }
            }
            
            newSheetProducts.add(",");
            
            List<String> result = new ArrayList<>();
            int count = 0;
            int start = 0;
            String input = newSheetProducts.toString();
            for (int i = 0; i < input.length(); i++) {
                if (input.charAt(i) == ',') {
                    count++;
                    if (count % 6 == 0) {
                        result.add(input.substring(start, i));
                        start = i + 1;
                    }
                }
            }
            for (int i = 0; i < result.size(); i ++){
                if (result.get(i).contains("Product Description") ||
                        result.get(i).contains("Shop Inventory") ||
                        result.get(i).contains("Shop Stock") ||
                        result.get(i).contains("Cost Price") ||
                        result.get(i).contains("Selling Price") ||
                        result.get(i).contains("Supplier Name")){
                    
                    result.remove(result.get(i));
                }
                
            }
            
            for (int i = 0; i < result.size(); i++){
               
                String[] splitData = result.get(i).split(",");
                int inventoryQty = Integer.parseInt(splitData[3].trim().replace(".0", ""));
                String stock = (splitData[4].trim().replace(".0", ""));
                int stockQty = Integer.parseInt(stock);
                String costPrice = splitData[1].replace("]","");
      
            
                if (costPrice.isEmpty()){
                    break;
                }
                RMPSPOS_ProductData product = new RMPSPOS_ProductData(
                        splitData[0].toLowerCase().trim(),
                        Float.parseFloat(costPrice),
                        Float.parseFloat(splitData[2]),
                        inventoryQty, stockQty,
                        splitData[5]);
                
                unsortedProds.add(product);
            }
            
            for (int i = 0; i < unsortedProds.size(); i ++){
                String descriptions = ((RMPSPOS_ProductData) unsortedProds.get(i)).getProdDescription();
                prodDescs.add(descriptions);
            }
            
            Collections.sort(prodDescs);
            
            for (int i = 0; i < prodDescs.size(); i ++){
                for (int x = 0; x < prodDescs.size(); x ++){
                    if (((RMPSPOS_ProductData) unsortedProds.get(x)).getProdDescription().equals(prodDescs.get(i))){
                        products.add(unsortedProds.get(x));
                    }
                }
            }
        workbook.close();
        Set<Object> set = new LinkedHashSet<Object>();
        set.addAll(products);
        
        products.clear();
        
       products.addAll(set);

        } catch (IOException ex) {
            Logger.getLogger(RMPSPOS_Home.class.getName()).log(Level.SEVERE, null, ex);
             JFrame frame = new JFrame();

            JOptionPane.showMessageDialog(frame, "CANNOT ACCESS DATA FILE\nClose Application",
               "Message", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
        
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RMPSPOS_Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RMPSPOS_Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RMPSPOS_Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RMPSPOS_Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RMPSPOS_Home().setVisible(true);
            }
        });
        
        CreatedProductList();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Init_Add;
    private javax.swing.JButton Init_CardSale;
    private javax.swing.JButton Init_CashSale;
    private javax.swing.JButton Init_Edit;
    private javax.swing.JPanel LHNavigation;
    private javax.swing.JPanel MainDisplay;
    private javax.swing.JButton Quantities;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
