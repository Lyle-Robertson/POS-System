/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package rmpspos_productdata;

import java.awt.print.PageFormat;
import java.awt.print.Paper;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.PdfWriter;
import static rmpspos_productdata.RMPSPOS_Home.products;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import static rmpspos_productdata.RMPSPOS_Home.SavingChangesToFile;


/**
 *
 * @author lance
 */
public class Card extends javax.swing.JPanel {

    static Dimension scrnSize = Toolkit.getDefaultToolkit().getScreenSize();
    static Rectangle winSize = GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds();
    static int taskBarHeight = scrnSize.height - winSize.height;
    /**
     * Creates new form Card
     */
    public Card() throws PrinterException {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        Search_OK = new javax.swing.JButton();
        Fill = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        Desc = new javax.swing.JLabel();
        IncreaseQTY = new javax.swing.JButton();
        Qty = new javax.swing.JTextField();
        DecreaseQTY = new javax.swing.JButton();
        Price = new javax.swing.JLabel();
        Add2Invoice = new javax.swing.JButton();
        RemoveFromInvoice = new javax.swing.JButton();
        ClearInvoice = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Invoice = new javax.swing.JTextArea();
        ToInvoice = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ProductTable1 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        ProductTable2 = new javax.swing.JTable();
        SaleCompleted1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(51, 51, 51));
        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setPreferredSize((new java.awt.Dimension(scrnSize.width -150, scrnSize.height - taskBarHeight)));

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setPreferredSize((new java.awt.Dimension(((scrnSize.width -150)/2) + 150 , 50)));

        jLabel1.setText("SEARCH");

        searchField.setPreferredSize(new java.awt.Dimension(100, 30));
        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        Search_OK.setBackground(new java.awt.Color(51, 51, 255));
        Search_OK.setText("OK");
        Search_OK.setPreferredSize(new java.awt.Dimension(80, 30));
        Search_OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Search_OKActionPerformed(evt);
            }
        });

        Fill.setBackground(new java.awt.Color(51, 51, 255));
        Fill.setText("FILL");
        Fill.setPreferredSize(new java.awt.Dimension(80, 30));
        Fill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FillActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Search_OK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Fill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search_OK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Fill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setPreferredSize((new java.awt.Dimension((scrnSize.width -150)/2, 50)));

        Desc.setText("PRODUCT");
        Desc.setPreferredSize(new java.awt.Dimension(300, 30));

        IncreaseQTY.setBackground(new java.awt.Color(51, 153, 0));
        IncreaseQTY.setText("+");
        IncreaseQTY.setPreferredSize(new java.awt.Dimension(30, 30));
        IncreaseQTY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IncreaseQTYActionPerformed(evt);
            }
        });

        Qty.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Qty.setText("0");
        Qty.setPreferredSize(new java.awt.Dimension(40, 30));

        DecreaseQTY.setBackground(new java.awt.Color(204, 0, 0));
        DecreaseQTY.setText("-");
        DecreaseQTY.setPreferredSize(new java.awt.Dimension(30, 30));
        DecreaseQTY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecreaseQTYActionPerformed(evt);
            }
        });

        Price.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Price.setText("PRICE");
        Price.setPreferredSize(new java.awt.Dimension(40, 30));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Desc, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(Price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(DecreaseQTY, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Qty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IncreaseQTY, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IncreaseQTY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Qty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DecreaseQTY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Desc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Add2Invoice.setBackground(new java.awt.Color(0, 153, 0));
        Add2Invoice.setText("ADD");
        Add2Invoice.setPreferredSize(new java.awt.Dimension(130, 30));
        Add2Invoice.setSelected(true);
        Add2Invoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add2InvoiceActionPerformed(evt);
            }
        });

        RemoveFromInvoice.setBackground(new java.awt.Color(204, 102, 0));
        RemoveFromInvoice.setText("REMOVE");
        RemoveFromInvoice.setPreferredSize(new java.awt.Dimension(150, 30));
        RemoveFromInvoice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RemoveFromInvoiceMouseClicked(evt);
            }
        });

        ClearInvoice.setBackground(new java.awt.Color(204, 0, 0));
        ClearInvoice.setText("CLEAR");
        ClearInvoice.setPreferredSize(new java.awt.Dimension(150, 30));
        ClearInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearInvoiceActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.setPreferredSize((new java.awt.Dimension(((scrnSize.width -150)/2) - 106 + 40, 50)));

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("CARD SALE INVOICE");
        jLabel2.setPreferredSize(new java.awt.Dimension(41, 30));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        Invoice.setColumns(20);
        Invoice.setFont(new java.awt.Font("Arial Narrow", 0, 8)); // NOI18N
        Invoice.setRows(5);
        Invoice.setBorder(null);
        jScrollPane2.setViewportView(Invoice);

        ToInvoice.setBackground(new java.awt.Color(51, 51, 255));
        ToInvoice.setText("TO INVOICE");
        ToInvoice.setPreferredSize(new java.awt.Dimension(150, 30));
        ToInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToInvoiceActionPerformed(evt);
            }
        });

        ProductTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PRODUCT", "PRICE (R)", "Qty"
            }
        ));
        ProductTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ProductTable1.setRowHeight(30);
        ProductTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ProductTable1.setShowGrid(true);
        ProductTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProductTable1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(ProductTable1);
        if (ProductTable1.getColumnModel().getColumnCount() > 0) {
            ProductTable1.getColumnModel().getColumn(0).setPreferredWidth(500);
            ProductTable1.getColumnModel().getColumn(1).setPreferredWidth(20);
            ProductTable1.getColumnModel().getColumn(2).setPreferredWidth(5);
        }

        ProductTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PRODUCT", "PRICE (R)", "QTY", "LINE TOTAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ProductTable2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ProductTable2.setRowHeight(30);
        ProductTable2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ProductTable2.setShowGrid(true);
        ProductTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProductTable2MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(ProductTable2);
        if (ProductTable2.getColumnModel().getColumnCount() > 0) {
            ProductTable2.getColumnModel().getColumn(0).setPreferredWidth(500);
            ProductTable2.getColumnModel().getColumn(1).setPreferredWidth(20);
            ProductTable2.getColumnModel().getColumn(2).setPreferredWidth(10);
            ProductTable2.getColumnModel().getColumn(3).setPreferredWidth(20);
        }

        SaleCompleted1.setBackground(new java.awt.Color(0, 153, 0));
        SaleCompleted1.setText("COMPLETE SALE");
        SaleCompleted1.setPreferredSize(new java.awt.Dimension(150, 30));
        SaleCompleted1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaleCompleted1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 699, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 699, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(Add2Invoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(RemoveFromInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ClearInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ToInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SaleCompleted1, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addGap(18, 18, 18)
                        .addComponent(SaleCompleted1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Add2Invoice, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(RemoveFromInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ClearInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ToInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    private void Search_OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Search_OKActionPerformed
        // TODO add your handling code here:
          // searching for product and adding to table
        
          
        int rowIndex = 0;
        
        DefaultTableModel searchTable = (DefaultTableModel)ProductTable1.getModel();
        searchTable.setRowCount(0);
        for (int i = 0; i < products.size(); i ++){
            if (((RMPSPOS_ProductData) products.get(i)).getProdDescription().contains(searchField.getText()))
            {    
                String [] searchTableResults = { 
                    ((RMPSPOS_ProductData)products.get(i)).getProdDescription(),
                    String.valueOf(((RMPSPOS_ProductData)products.get(i)).getPrice()),
                    String.valueOf(((RMPSPOS_ProductData)products.get(i)).getInventoryQty())};
                
                searchTable.insertRow(rowIndex, searchTableResults);
                rowIndex ++;
            }
        }   
    }//GEN-LAST:event_Search_OKActionPerformed

    private void ProductTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductTable1MouseClicked
        // TODO add your handling code here:
        
         JTable source = (JTable)evt.getSource();
        int row = source.rowAtPoint( evt.getPoint() );
        String prodDescCodeInRow = source.getModel().getValueAt(row, 0 )+"";

        for ( int i = 0; i < products.size(); i ++){
            if (((RMPSPOS_ProductData) products.get(i)).getProdDescription().equals(prodDescCodeInRow)){
                Desc.setText(((RMPSPOS_ProductData) products.get(i)).getProdDescription());
                Price.setText(String.valueOf(((RMPSPOS_ProductData) products.get(i)).getPrice()));
                Qty.setText("1");
            }
        }
    }//GEN-LAST:event_ProductTable1MouseClicked

    private void ClearInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearInvoiceActionPerformed
        // TODO add your handling code here:
        
        ((DefaultTableModel)ProductTable2.getModel()).setRowCount(0);
    }//GEN-LAST:event_ClearInvoiceActionPerformed

    private void ProductTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductTable2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_ProductTable2MouseClicked

    private void Add2InvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add2InvoiceActionPerformed
        // TODO add your handling code here:
        
        int rowIndex = 0;
        String prodDesc = Desc.getText();
        DefaultTableModel invoiceTable = (DefaultTableModel)ProductTable2.getModel();
       
    
        for (int i = 0; i < products.size(); i ++){
            if (((RMPSPOS_ProductData) products.get(i)).getProdDescription().equals(prodDesc)){
                // getting price and qty to create line total
                float price = ((RMPSPOS_ProductData) products.get(i)).getPrice();
                String lineTotal = String.valueOf(Integer.parseInt(Qty.getText()) * price );
                
                String[] addToInvoice = {
                    ((RMPSPOS_ProductData) products.get(i)).getProdDescription(),
                    String.valueOf(((RMPSPOS_ProductData) products.get(i)).getPrice()),
                    String.valueOf(Qty.getText()),
                    lineTotal};
                    invoiceTable.insertRow(rowIndex, addToInvoice);
                    rowIndex ++;
            }   
        }
    }//GEN-LAST:event_Add2InvoiceActionPerformed

    private void DecreaseQTYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecreaseQTYActionPerformed
        // TODO add your handling code here:
        
        int currentQty = Integer.parseInt(Qty.getText());
        int newQty = currentQty - 1;
        Qty.setText(String.valueOf(newQty));
    }//GEN-LAST:event_DecreaseQTYActionPerformed

    private void IncreaseQTYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IncreaseQTYActionPerformed
        // TODO add your handling code here:
        
        int currentQty = Integer.parseInt(Qty.getText());
        int newQty = currentQty + 1;
        Qty.setText(String.valueOf(newQty));
    }//GEN-LAST:event_IncreaseQTYActionPerformed

    private void RemoveFromInvoiceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RemoveFromInvoiceMouseClicked
        // TODO add your handling code here:
        
        int column = ProductTable2.getColumnModel().getColumnIndexAtX(evt.getX());
        int row = evt.getY() / ProductTable2.getRowHeight();
        
        
        if (ProductTable2.getRowCount() >= row && row >= 0 && 
                column < ProductTable2.getColumnCount() && column >= 0){
            
            DefaultTableModel invoiceTable = (DefaultTableModel)this.ProductTable2.getModel();
            int []selectedRows = ProductTable2.getSelectedRows();
            
            
            for (int i = 0; i < selectedRows.length; i ++){
                invoiceTable.removeRow(selectedRows[i]);
            }
        } 
    }//GEN-LAST:event_RemoveFromInvoiceMouseClicked

    private void ToInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToInvoiceActionPerformed
        // TODO add your handling code here:
        
        String mechant = "\n\tMERCHANT COPY\n";
        Invoice(mechant);
    }//GEN-LAST:event_ToInvoiceActionPerformed

    public void Invoice(String receiptType){
        
        Invoice.setText("\n\n||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||");
        Invoice.setText(Invoice.getText() + "\n   RAVENSMEAD PLUMBING SOLUTIONS\n");
        Invoice.setText(Invoice.getText() + "\n                 76 Industrial Ring Road");
        Invoice.setText(Invoice.getText() + "\n           Unit 23 Ravensmead Bus Park");
        Invoice.setText(Invoice.getText() + "\n               Reg No. 2010/137077/23");
        Invoice.setText(Invoice.getText() + "\n                  Vat No. 4950270845");
        Invoice.setText(Invoice.getText() + "\n  ravensmeadplumbingsolutions@gmail.com");
        Invoice.setText(Invoice.getText() + "\n                  CELL: 078 517 0698");
        Invoice.setText(Invoice.getText() + "\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n");

        TableModel productTable = ProductTable2.getModel();
        String soldProducts = "";
        double lineTotal = 0;
        double vat = 0;
        BigDecimal theVat = new BigDecimal(vat).setScale(2, RoundingMode.HALF_UP);  ;
        BigDecimal theLineTotal = new BigDecimal(lineTotal).setScale(2, RoundingMode.HALF_UP);  ;
        for (int i = 0; i < productTable.getRowCount(); i ++){
           
           String [] productDesc = ((String) ProductTable2.getValueAt(i, 0)).split("-");
           soldProducts = soldProducts + "\n" + productDesc[0];
           soldProducts = soldProducts + "\n" + productDesc[1] + "\n";
           
           double unitPrice = Double.parseDouble((String) ProductTable2.getValueAt(i, 1));
           double price = Double.parseDouble((String) ProductTable2.getValueAt(i, 3));
           
           BigDecimal roundPrice = new BigDecimal(price).setScale(2, RoundingMode.HALF_UP);  
           double thePrice = roundPrice.doubleValue();
           
           soldProducts = soldProducts + "\t" + (String) ProductTable2.getValueAt(i, 2);
           soldProducts = soldProducts + "   @   R " + unitPrice;
           soldProducts = soldProducts + "       R " + thePrice;
           
           lineTotal = lineTotal + price  ;
           
        }
        
        vat = (lineTotal * 0.15); 
        Invoice.setText(Invoice.getText() + soldProducts + "\n");
       
        Invoice.setText(Invoice.getText() + "\n||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n\n");
        Invoice.setText(Invoice.getText() + "SUBTOTAL\t\tR ");
        
        BigDecimal Total = new BigDecimal(lineTotal).setScale(2, RoundingMode.HALF_UP);  
        double subtotal = Total.doubleValue();
        
        Invoice.setText(Invoice.getText() + subtotal);
        Invoice.setText(Invoice.getText() + "\nVAT 15% (Included)    \tR ");
        
        BigDecimal Vat = new BigDecimal(vat).setScale(2, RoundingMode.HALF_UP);  
        double inclVat = Vat.doubleValue();
        Invoice.setText(Invoice.getText() + inclVat);
        Invoice.setText(Invoice.getText() + "\nTOTAL\t\tR ");     
        Invoice.setText(Invoice.getText() + subtotal + "\n");
        Invoice.setText(Invoice.getText() + "\n||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n\n");
        Invoice.setText(Invoice.getText() + receiptType);
        Invoice.setText(Invoice.getText() + "\nCARD SALE INVOICE\n");
        DateTimeFormatter dateTime = DateTimeFormatter.ofPattern("dd/MM/yyy HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();
        String date = dateTime.format(now);
        Invoice.setText(Invoice.getText() + date );
        Invoice.setText(Invoice.getText() + "\n\nTHANK  YOU\n\n\n\n.");
        
    }
    
    
    private void SaleCompleted1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaleCompleted1ActionPerformed

        TableModel productTable = ProductTable2.getModel();
        
        for (int i = 0;  i < productTable.getRowCount(); i ++){
            for (int x = 0; x < products.size(); x ++){
                if (((RMPSPOS_ProductData) products.get(x)).getProdDescription().equals(
                        (String) ProductTable2.getValueAt(i, 0))){
                    
                    int InventQtyB4Sale = ((RMPSPOS_ProductData) products.get(x)).getInventoryQty();
                    int QtySold = Integer.parseInt((String)(ProductTable2.getValueAt(i, 2)));
                    int newInventQty = InventQtyB4Sale - QtySold;
                    
                    ((RMPSPOS_ProductData) products.get(x)).setInventoryQty(newInventQty);
                    
                }
            }
        }

        try {
            String currentDirectory = System.getProperty("user.dir");
            
            DateTimeFormatter dateTime = DateTimeFormatter.ofPattern("dd-MM-yyy HH-mm-ss");
            LocalDateTime now = LocalDateTime.now();
            String date = dateTime.format(now);

            Document document = new Document();
            
            PdfWriter.getInstance(document, new FileOutputStream(
                    currentDirectory + "\\Sales\\Card\\" +  date + ".pdf"));
           
            document.open();
 
            Paragraph para = new Paragraph(Invoice.getText());
            document.add(para); 
            document.close();
            
        } catch (FileNotFoundException | DocumentException ex) {
            Logger.getLogger(Card.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
                // Open a document
        
        try {
            JFrame frame = new JFrame();
            JOptionPane.showMessageDialog(frame, "ACTION COMPLETE");
            SavingChangesToFile();
            
            printInvoice();
            
            String customer = "\n\tCUSTOMER  COPY\n";
            Invoice(customer);
            printInvoice();
            // Clearing Data
            ((DefaultTableModel)ProductTable2.getModel()).setRowCount(0);
            ((DefaultTableModel)ProductTable1.getModel()).setRowCount(0);
            Desc.setText("");
            Price.setText("");
            Qty.setText("");
            searchField.setText("");
            Invoice.setText("");
                    
         
            
        } catch (IOException ex) {
            Logger.getLogger(Card.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SaleCompleted1ActionPerformed

    
    public void printInvoice(){
        
        PrinterJob invoice = PrinterJob.getPrinterJob();
        PageFormat pf = invoice.defaultPage();

        Paper paper = new Paper();
        paper.setSize(130, 2000);
        double margin = 0.2;
        paper.setImageableArea(margin, margin, paper.getWidth() - margin * 2, paper.getHeight());
        pf.setPaper(paper);

        invoice.setPrintable( new MyPrintable(Invoice), pf);
        
        try {
            invoice.print();
        } catch (PrinterException ex) {
            Logger.getLogger(Card.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void FillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FillActionPerformed
        // TODO add your handling code here:
        DefaultTableModel searchTable = (DefaultTableModel)ProductTable1.getModel();
        searchTable.setRowCount(0);
        int rowIndex = 0;

        for (int i = 0; i < products.size(); i ++){   
                String [] inventoryTableResults = { 
                    ((RMPSPOS_ProductData)products.get(i)).getProdDescription(),
                    String.valueOf(((RMPSPOS_ProductData)products.get(i)).getPrice()),
                    String.valueOf(((RMPSPOS_ProductData)products.get(i)).getInventoryQty())
                };
                searchTable.insertRow(rowIndex, inventoryTableResults);
                rowIndex ++;
        }
    }//GEN-LAST:event_FillActionPerformed
class MyPrintable implements Printable {
        JTextArea str;
        public MyPrintable(JTextArea getStr)
        {
            str = getStr;
        }
        public int print(Graphics g, PageFormat pf, int pageIndex) {
            if (pageIndex != 0){
              return NO_SUCH_PAGE;
                }
 Graphics2D g2 = (Graphics2D) g;
        g2.translate(pf.getImageableX(), pf.getImageableY());
        Rectangle componentBounds = str.getBounds(null);
        g2.translate(-componentBounds.x, -componentBounds.y);
        g2.scale(1, 1);
        boolean wasBuffered = str.isDoubleBuffered();
        str.paint(g2);
        str.setDoubleBuffered(wasBuffered);
        return PAGE_EXISTS;
        }
        
      }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add2Invoice;
    private javax.swing.JButton ClearInvoice;
    private javax.swing.JButton DecreaseQTY;
    private javax.swing.JLabel Desc;
    private javax.swing.JButton Fill;
    private javax.swing.JButton IncreaseQTY;
    private javax.swing.JTextArea Invoice;
    private javax.swing.JLabel Price;
    private javax.swing.JTable ProductTable1;
    private javax.swing.JTable ProductTable2;
    private javax.swing.JTextField Qty;
    private javax.swing.JButton RemoveFromInvoice;
    private javax.swing.JButton SaleCompleted1;
    private javax.swing.JButton Search_OK;
    private javax.swing.JButton ToInvoice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
}
